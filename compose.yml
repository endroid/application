services:
#    frankenphp:
#        image: dunglas/frankenphp
#        environment:
#            APP_RUNTIME: Runtime\FrankenPhpSymfony\Runtime
#            FRANKENPHP_CONFIG: 'worker ./public/index.php'
#        volumes:
#            - ./symfony/application:/app
#        ports:
#            - '81:80'
#            - '444:443'

#    nginx:
#        image: ghcr.io/endroid/docker-nginx:latest
#        volumes:
#            - .:/var/www/html
#            - ./.docker/nginx/letsencrypt:/etc/letsencrypt
#            - ./.docker/nginx/ssl:/etc/nginx/ssl
#            - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf
#        depends_on:
#            - node
#            - php
#        ports:
#            - '80:80'
#            - '443:443'
#            - '3000:3000'
#            - '5000:5000'
#            - '8000:8000'
#            - '9000:9000'
#            - '9100:9100'
#            - '9200:9200'

#    fusionauth:
#        image: fusionauth/fusionauth-app:1.48.1
#        environment:
#            DATABASE_URL: jdbc:postgresql://postgres:5432/fusionauth
#            DATABASE_ROOT_USERNAME: root
#            DATABASE_ROOT_PASSWORD: root
#            DATABASE_USERNAME: fusionauth
#            DATABASE_PASSWORD: fusionauth
#            FUSIONAUTH_APP_MEMORY: 256M
#            FUSIONAUTH_APP_RUNTIME_MODE: development
#            FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/kickstart.json
#        volumes:
#            - ./.docker/fusionauth/kickstart:/usr/local/fusionauth/kickstart
#        depends_on:
#            - postgres
#        ports:
#            - '9011:9011'

    caddy:
        image: caddy:2.8-alpine
        restart: unless-stopped
        cap_add:
            - NET_ADMIN
        ports:
            - '80:80'
            - '443:443'
            - '443:443/udp'
            - '9000:9000'
            - '9000:9000/udp'
        depends_on:
            - php
        volumes:
            - .:/var/www/html
            - ./.docker/caddy/Caddyfile:/etc/caddy/Caddyfile
            - ./.docker/caddy/data:/data
        command: ["caddy", "run", "--watch", "--config", "/etc/caddy/Caddyfile"]

    php:
        image: ghcr.io/endroid/docker-php:latest
        volumes:
            - .:/var/www/html
            - ~/.composer:/home/www-data/.composer
            - ~/.gitconfig:/home/www-data/.gitconfig
            - ~/.gitignore_global:/home/www-data/.gitignore_global
            - ~/.ssh:/home/www-data/.ssh
        depends_on:
            - postgres
            - redis
        expose:
            - 9000
        ports:
            - '6001:6000'

    node:
        image: ghcr.io/endroid/docker-node:latest
        tty: true
        environment:
            NODE_ENV: development
        volumes:
            - .:/app
            - ~/.gitconfig:/home/node/.gitconfig
            - ~/.npm:/home/node/.npm
        depends_on:
            - postgres
            - redis
        ports:
            - '3001:3000'
            - '5173:5173'

    python:
        image: ghcr.io/endroid/docker-python:latest
        tty: true
        volumes:
            - .:/app
            - ~/.gitconfig:/home/python/.gitconfig
        ports:
            - '5001:5000'

    rust:
        image: ghcr.io/endroid/docker-rust:latest
        tty: true
        volumes:
            - .:/app
            - ~/.gitconfig:/home/rust/.gitconfig
        expose:
            - '8001:8000'

    golang:
        image: ghcr.io/endroid/docker-golang:latest
        tty: true
        environment:
            GOCACHE: /usr/src/app/.docker/golang/cache
        volumes:
            - .:/usr/src/app
            - ~/.gitconfig:/.gitconfig
        ports:
            - '6060:6060'

    redis:
        image: redis:7.2.3-alpine3.18
        volumes:
            - .docker/redis/data:/data
        expose:
            - 6379

    postgres:
        image: postgres:16.1-alpine3.18
        environment:
            POSTGRES_DB: nestjs
            POSTGRES_USER: root
            POSTGRES_PASSWORD: root
        volumes:
            - .docker/postgres/data:/var/lib/postgresql/data
        ports:
            - '5432:5432'

    meilisearch:
        image: getmeili/meilisearch:latest
        environment:
            - http_proxy
            - https_proxy
            - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
            - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-true}
            - MEILI_ENV=${MEILI_ENV:-development}
            - MEILI_LOG_LEVEL
            - MEILI_DB_PATH=${MEILI_DB_PATH:-/data.ms}
        ports:
            - ${MEILI_PORT:-7700}:7700
        volumes:
            - .docker/meilisearch/data.ms:/data.ms
        restart: unless-stopped

#    zookeeper:
#        image: bitnami/zookeeper:3.9.1
#        environment:
#            ZOO_PORT_NUMBER: 2181
#            ZOO_SERVER_ID: 1
#            ZOO_SERVERS: zookeeper:2888:3888
#            ALLOW_ANONYMOUS_LOGIN: 'yes'
#        ports:
#            - '2181:2181'
#
#    kafka:
#        image: confluentinc/cp-kafka:7.4.3
#        environment:
#            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
#            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#            KAFKA_BROKER_ID: 1
#            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#            KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#        ports:
#            - "9092:9092"
#            - "29092:29092"
#
#    kafka-ui:
#        image: provectuslabs/kafka-ui:latest
#        depends_on:
#            - kafka
#        environment:
#            KAFKA_CLUSTERS_0_NAME: local
#            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:19092
#            DYNAMIC_CONFIG_ENABLED: 'true'
#        ports:
#            - '8080:8080'

    blackfire:
        image: blackfire/blackfire:2.23.0
        environment:
            # Do not change: instead set these envs on your host
            BLACKFIRE_SERVER_ID: ~
            BLACKFIRE_SERVER_TOKEN: ~
            BLACKFIRE_CLIENT_ID: ~
            BLACKFIRE_CLIENT_TOKEN: ~
